version: "3.8"
services:
  database:
    image: "postgres:13"
    container_name: app-database
    restart: on-failure
    expose:
      - "5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWD}
    volumes:
      - database-data:/var/lib/postgresql/data

  api:
    container_name: app-api
    restart: on-failure
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    expose:
      - "8080"
    ports:
      - "127.0.0.1:8181:8181"
      - "127.0.0.1:4848:4848"
    depends_on:
      - "database"
    environment:
      COMPOSE_DB_HOST: app-database
      COMPOSE_DB_BASE: ${DB_NAME}
      COMPOSE_DB_USER: ${DB_USER}
      COMPOSE_DB_PASSWD: ${DB_PASSWD}
    labels:
      - "traefik.http.services.api.loadbalancer.server.port=8080"
      - "traefik.http.routers.api.rule=Host(`${API_TLD}`)"
      - "traefik.http.routers.api.middlewares=api-add-prefix@docker"
      - "traefik.http.middlewares.api-add-prefix.addprefix.prefix=/server"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=buypass"
    volumes:
      - api-pictures:/opt/payara/images

  reverse-proxy:
    container_name: frivillig-proxy
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    ports:
      # Front ports
      - "80:80"
      - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/config/cert.json:/acme.json
      - ${PWD}/config/traefik.toml:/traefik.toml
volumes:
  database-data:
  api-pictures:
